/* This object may not be sorted properly in the script due to cirular references. */
--
-- API_METADATA  (Package) 
--
CREATE OR REPLACE PACKAGE EDSC_META.API_METADATA  AS

  PROCEDURE UPSERT_MD_IPCOBJECTS(
    /*
    Назначение:
      Процедура предназначена для изменения регистрации потоков IPC в метаданных Продукта
      В результате изменения добавляется или обновляется одна запись в таблице объектов IPC
    Тип процедуры:
      API
    */
    p_folder_name      IN VARCHAR2, /* Параметр принимает значение имени папки IPC, в которой размещается объект IPC*/
    p_workflow_name    IN VARCHAR2, /* Параметр принимает значение имени потока IPC */
    p_purposetype_code IN VARCHAR2, /* Параметр принимает значение типа функционального назначения потока IPC*/
    p_ipcobject_desc   IN VARCHAR2 DEFAULT NULL, /* Значением параметра может быть определено описание потока IPC*/
    p_patch_code       IN VARCHAR2 DEFAULT NULL  /* Значением параметра определяется номер патча, в котором вносятся изменения. */
   );

  PROCEDURE DEL_MD_IPCOBJECTS(
    /*
    Назначение:
      Процедура предназначена для выполнения логического удаления потоков IPC в метаданных Продукта.
      Логически удаленный поток не может использоваться для запуска в рамках потоков WF_RUN_ANY_ETL,
      Для него не могут быть определены пользовательские значения параметров.
      В результате логического обновления обновляется атрибут ACTIVE_FLAG для записи в таблице объектов IPC
      по ключу
    Тип процедуры:
      API
    */
    p_folder_name   IN VARCHAR2, /* Параметр принимает значение папки IPC, в которой размещается объект IPC */
    p_workflow_name IN VARCHAR2, /* Параметр принимает значение имени потока IPC */
    p_patch_code    IN VARCHAR2 DEFAULT NULL  /* Значением параметра определяется номер патча, в котором вносятся изменения. */
  );

  PROCEDURE UPSERT_MD_PARAMETERS(
    /*
    Назначение:
        Процедура предназначена для изменения (добавления или обновления) регистрации параметра в метаданных Продукта.
        В результате изменения добавляется или обновляется одна запись в таблице параметров.

    Тип процедуры:
        API
    */
    p_param_name    IN VARCHAR2, /* Параметр принимает  значение имени параметра в метаданных продукта */
    p_param_desc    IN VARCHAR2, /* Параметр принимает значение описания параметра */
    p_datatype_code IN VARCHAR2, /* Параметр принимает значение типа данных параметра */
    p_patch_code    IN VARCHAR2 DEFAULT NULL  /* Номер патча */
  );

  PROCEDURE DEL_MD_PARAMETERS(
    /*
        Назначение:
            Процедура предназначена для выполнения логического удаления параметров в метаданных Продукта. Логически удаленный параметр не может использоваться при генерации значений параметров и для него не могут быть определены пользовательские значения параметров.
            В результате логического удаления обновляется атрибут ACTIVE_FLAG для записи в таблице параметров по ключу.

        Тип процедуры:
            API
    */
    p_param_name IN VARCHAR2, /* Параметр принимает значение имени параметра, используемого в потоках IPC */
    p_patch_code IN VARCHAR2 DEFAULT NULL   /* Номер патча */
  );

  /*
    Назначение:
      Процедура предназначена для изменения (добавления или обновления) назначения параметров oбъектам IPC и правила вычисления его значения в зависимости от режима и регламента загрузки данных.
      В результате исполнения регистрации формируется одна запись в таблице параметров.
    Тип процедуры:
      API
  */
  PROCEDURE UPSERT_MD_IPCOBJPARAMS (
      p_folder_name         IN VARCHAR2 /* Параметр принимает значение имени параметра, используемого в потоках IPC. */
    , p_workflow_name       IN VARCHAR2 /* Параметр принимает значение описание параметра. */
    , p_ipcobjtype_code     IN VARCHAR2 DEFAULT 'WORKFLOW' /* Параметр принимает значение тип объекта IPC, на основании которого формируется секция файла параметров.*/
    , p_ipcobject_name      IN VARCHAR2 DEFAULT NULL /* Параметр принимает значение физическое имя объекта IPC, для которого определяется правила формирования значения параметра.*/
    , p_param_name          IN VARCHAR2 /* Указывается имя параметра, для которого определяется правило вычисления значения.*/
    , p_loadingmode_code    IN VARCHAR2 DEFAULT 'INCREMENT' /* Параметр принимает значение режима загрузки, для которого определяется правило вычисления значения. */
    , p_reglamenttype_code  IN VARCHAR2 DEFAULT 'REGULAR_D' /* Параметр принимает значение типа регламента загрузки, для которого определяется правило вычисления значения.*/
    , p_paramvaluetype_code IN VARCHAR2 /* Указывается тип значения параметра в соответствии с системным словарем DCT_PARAMVALUETYPES. */
    , p_param_value         IN VARCHAR2 /* Указывается значение параметра или правило его вычисления в зависимости от указанного типа значения.*/
    , p_logging_flag        IN VARCHAR2 DEFAULT 'Y' /* Указывается логический признак (Y|N), который определяет необходимость логирования вычисленного значения в журнале LOG_PARAMPREVVALUE. */
    , p_patch_code          IN VARCHAR2 DEFAULT NULL /* Значением параметра определяется номер патча, в котором вносятся изменения.*/
  );


  PROCEDURE UPSERT_MD_TABLES(
    /*
    Процедура изменения метаданных для таблиц Витрины
    Назначение:
      Процедура предназначена для изменения (добавления или обновления) регистрации таблиц Витрин в метаданных Продукта
      В результате изменения добавляется или обновляется одна запись в регистрации таблиц Витрины.
    Тип процедуры: API
    */

    p_schema_name IN VARCHAR2, /* Параметр принимает значение имени схемы Витрины, в которой размещена таблица*/
    p_table_name IN VARCHAR2, /* Параметр принимает значение SQL-имени таблицы Витрины */
    p_table_desc IN VARCHAR2 DEFAULT NULL, /* Параметр принимает значение описания таблицы Витрины */
    p_patch_code IN VARCHAR2 DEFAULT NULL /* Значением параметра определяется номер патча, в котором вносятся изменения.*/
  );

  PROCEDURE REMOVE_MD_TABLES(
    /*
    Процедура физического удаления метаданных для таблицы Витрины
    Назначение:
      Процедура предназначена для удаления регистрации таблиц Витрин в метаданных продукта
      В результате изменения добавляется или обновляется одна запись в реестре атрибутов таблиц Витрины
    Тип процедуры:
      API
    */
    p_schema_name IN VARCHAR2, /* Параметр принимает значение имени схемы Витрины, в которой размешена таблица */
    p_table_name  IN VARCHAR2 /* Параметр принимает значение SQL-имени таблицы Витрины */
  );

  PROCEDURE UPSERT_MD_COLUMNS(
    /*
    Процедура изменений метаданных для атрибута таблиц Витрины
    Назначение:
      Процедура предназначена для изменения(добавления или обновления) регистрации атрибута таблиц Витрины в метаданных Продукта
      В результате изменения добавляется или обновляется запись в Атрибутах таблиц Витрины
    */
    p_schema_name        IN VARCHAR2, /* Параметр принимает значение SQL-имени схемы Витрины, в которой размещена таблица */
    p_table_name         IN VARCHAR2,  /* Параметр принимает значение SQL-имени таблицы Витрины. */
    p_column_name        IN VARCHAR2, /* Параметр принимает значение SQL-имени добавляемого/изменяемого поля таблицы. */
    p_deletedkey_flag    IN VARCHAR2, /* Параметр принимает значение для определения флага поля для определения ключа для удаления */
    p_nvl_flag           IN VARCHAR2, /* Параметр принимает значение для определения флага поля для определения обработки необязательных полей функции NVL */
    p_columntype_code    IN VARCHAR2,
    p_default_value      IN VARCHAR2 DEFAULT NULL, /* Параметр принимает значение по умолчанию, определенное для атрибута таблицы, которое используется при обработке NVL*/
    p_ref_scheme_name    IN VARCHAR2 DEFAULT NULL, /* Параметр принимает значение SQL-имени схемы, в которой размешена таблица, на которую ссылается атрибут */
    p_ref_table_name     IN VARCHAR2 DEFAULT NULL, /* Параметр принимает значение SQL-имени таблицы, на которую ссылается атрибут */
    p_ref_expression_sql IN VARCHAR2 DEFAULT NULL, /* Параметр принимает значение SQL-выражение, значения которого явдяются исходными натуральными ключами для заполнения поля DM*_STG.KEYBRIDGE.CODE */
    p_insnewkey_flag     IN VARCHAR2 DEFAULT NULL, /* Флаг, который определяет, что по значениям натурального ключа ссылочного атрибута требуется генерация суррогатных ключей DK */
    p_patch_code         IN NUMBER DEFAULT NULL /* Параметр принимает значение идентификатора Управляющего потока, в рамках которого исполняется. */
  );

END API_METADATA;
/

/* This object may not be sorted properly in the script due to cirular references. */
--
-- API_METADATA  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY EDSC_META.API_METADATA  AS

    /* Процедуры управления метаданными объектов IPC */

  PROCEDURE UPSERT_MD_IPCOBJECTS(
    p_folder_name       IN VARCHAR2, /* Параметр принимает значение имени папки IPC, в которой размещается объект IPC*/
    p_workflow_name     IN VARCHAR2, /* Параметр принимает значение имени потока IPC */
    p_purposetype_code  IN VARCHAR2, /* Параметр принимает значение типа функционального назначения потока IPC*/
    p_ipcobject_desc    IN VARCHAR2 DEFAULT NULL, /* Значением параметра может быть определено описание потока IPC*/
    p_patch_code        IN VARCHAR2
)
  IS
    v_check_flag NUMBER;
  BEGIN

    /*
    1.	Контроль параметров:
      a.	Если p_folder_name равен NULL,
        то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = ’e_paramvalue_empty’
        •	p_errmsg_text    = ‘Значение параметра P_FOLDER_NAME не может принимать значение NULL’
        •	p_plsqlunit_name = ‘API_METADATA.UPSERT_MD_IPCOBJECTS’
        •	p_severity_code  = ‘E’
    */
    IF p_folder_name IS NULL  THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_paramvalue_empty',
          P_ERRMSG_TEXT    => 'Значение параметра P_FOLDER_NAME не может принимать значение NULL',
          P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_IPCOBJECTS',
          P_SEVERITY_CODE  => 'E',
          P_SQLERRM_TEXT   => NULL
      );
    END IF;

    /*
      b.	Если p_workflow_name равен NULL,
        то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = ’e_paramvalue_empty’
        •	p_errmsg_text    = ‘Значение параметра P_WORKFLOW_NAME не может принимать значение NULL’
        •	p_plsqlunit_name = ‘API_METADATA.UPSERT_MD_IPCOBJECTS’
        •	p_severity_code  = ‘E’
    */

    IF p_workflow_name IS NULL THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_paramvalue_empty',
          P_ERRMSG_TEXT    => 'Значение параметра P_WORKFLOW_NAME не может принимать значение NULL',
          P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_IPCOBJECTS',
          P_SEVERITY_CODE  => 'E',
          P_SQLERRM_TEXT   => NULL
      );
    END IF;


    /*
      c.	Если p_purposetype_code равен NULL,
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = ’e_paramvalue_empty’
        •	p_errmsg_text    = ‘Значение параметра P_PURPOSETYPE_CODE не может принимать значение NULL’
        •	p_plsqlunit_name = ‘API_METADATA.UPSERT_MD_IPCOBJECTS’
        •	p_severity_code  = ‘E’
    */

    IF p_purposetype_code IS NULL
      THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
        P_EXCEPTION_NAME => 'e_paramvalue_empty',
        P_ERRMSG_TEXT    => 'Значение параметра P_PURPOSETYPE_CODE не может принимать значение NULL',
        P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_IPCOBJECTS',
        P_SEVERITY_CODE  => 'E'
      );
    END IF;


    /*
    2.	Если найдена запись в таблице MD_IPCOBJECTS, у которой:
      •	FOLDER_NAME   = p_folder_name
      •	WORKFLOW_NAME = p_workflow_name
        то обновляется найденная запись в таблице MD_IPCOBJECTS с установкой значений полей:
        •	PURPOSETYPE_CODE = p_purposetype_code
        •	IPCOBJECT_DESC   = p_ipcobject_desc
        •	CHANGE_DATE      = SYSDATE
        •	PATCH_CODE       = p_patch_code
      иначе добавляется запись в таблицу MD_IPCOBJECTS со значениями полей:
        •	FOLDER_NAME      = p_folder_name
        •	WORKFLOW_NAME    = p_workflow_name
        •	PURPOSETYPE_CODE = p_purposetype_code
        •	IPCOBJECT_DESC   = p_ipcobject_desc
        •	ACTIVE_FLAG      = ‘Y’
        •	CHANGE_DATE      = SYSDATE
        •	PATCH_CODE       = p_patch_code
    */
    BEGIN
      SELECT 1
        INTO v_check_flag
        FROM MD_IPCOBJECTS
       WHERE FOLDER_NAME   = p_folder_name
         AND WORKFLOW_NAME = p_workflow_name;
      EXCEPTION
        WHEN NO_DATA_FOUND
        THEN v_check_flag := 0;
    END;

    v_check_flag := nvl(v_check_flag, 0);

    IF v_check_flag = 1 THEN
      UPDATE MD_IPCOBJECTS
         SET PURPOSETYPE_CODE = nvl(p_purposetype_code, PURPOSETYPE_CODE),
             IPCOBJECT_DESC   = nvl(p_ipcobject_desc, IPCOBJECT_DESC),
             CHANGE_DATE      = SYSDATE,
             PATCH_CODE       = nvl(p_patch_code, PATCH_CODE)
       WHERE FOLDER_NAME    = p_folder_name
         AND WORKFLOW_NAME  = p_workflow_name;

    ELSIF v_check_flag = 0 THEN

      INSERT INTO md_ipcobjects (
               FOLDER_NAME, WORKFLOW_NAME, PURPOSETYPE_CODE, IPCOBJECT_DESC,
               ACTIVE_FLAG, CHANGE_DATE, PATCH_CODE
               )
        VALUES (
               p_folder_name, p_workflow_name, p_purposetype_code, p_ipcobject_desc,
               'Y', SYSDATE, p_patch_code
               );
    END IF;

    /*
    3. Выполняется подтверждение транзакции БД
    */
    COMMIT;

    /*
    4.	Если при исполнении процедуры возникли исключения,
      то:
      a.	Если SQLCODE не входит в диапазон [-20999;-20000],
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = SQLCODE
        •	p_errmsg_text    = ‘Системная ошибка’
        •	p_plsqlunit_name = ‘API_METADATA.UPSERT_MD_IPCOBJECTS’
        •	p_severity_code  = ‘S’
        •	p_sqlerrm_text   = SQLERRM
      b.	Вызывается системное исключение.
    */
  EXCEPTION
    WHEN OTHERS THEN
    IF SQLCODE NOT BETWEEN -20999 AND -20000 THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
         P_EXCEPTION_NAME => TO_CHAR(SQLCODE),
         P_ERRMSG_TEXT    => 'Системная ошибка',
         P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_IPCOBJECTS',
         P_SEVERITY_CODE  => 'S',
         P_SQLERRM_TEXT   => SQLERRM
       );
    END IF;
    RAISE;
  END;

  PROCEDURE DEL_MD_IPCOBJECTS (
    p_folder_name   IN VARCHAR2, /* Параметр принимает значение папки IPC, в которой размещается объект IPC */
    p_workflow_name IN VARCHAR2, /* Параметр принимает значение имени потока IPC */
    p_patch_code    IN VARCHAR2 DEFAULT NULL /* Значением параметра определяется номер патча, в котором вносятся изменения */
    )
  IS
    v_check_flag NUMBER;
  BEGIN

    /*
    1.	Контроль параметров:
      a.	Если P_FOLDER_NAME равен NULL,
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = ’e_paramvalue_empty’
        •	p_errmsg_text    = ‘Значение параметра P_FOLDER_NAME не может принимать значение NULL’
        •	p_plsqlunit_name = ‘API_METADATA.DEL_MD_IPCOBJECTS’
        •	p_severity_code  = ‘E’
    */

    IF p_folder_name IS NULL  THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_paramvalue_empty',
          P_ERRMSG_TEXT    => 'Значение параметра P_FOLDER_NAME не может принимать значение NULL',
          P_PLSQLUNIT_NAME => 'API_METADATA.DEL_MD_IPCOBJECTS',
          P_SEVERITY_CODE  => 'E',
          P_SQLERRM_TEXT   => NULL
      );
    END IF;

    /*
      b.	Если P_WORKFLOW_NAME равен NULL,
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = ’e_paramvalue_empty’
        •	p_errmsg_text    = ‘Значение параметра P_WORKFLOW_NAME не может принимать значение NULL’
        •	p_plsqlunit_name = ‘API_METADATA. DEL_MD_IPCOBJECTS’
        •	p_severity_code  = ‘E’
    */
    IF p_workflow_name IS NULL THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_paramvalue_empty',
          P_ERRMSG_TEXT    => 'Значение параметра P_WORKFLOW_NAME не может принимать значение NULL',
          P_PLSQLUNIT_NAME => 'API_METADATA.DEL_MD_IPCOBJECTS',
          P_SEVERITY_CODE  => 'E',
          P_SQLERRM_TEXT   => NULL
      );
    END IF;

    /*
    2.	Если найдена запись в таблице MD_IPCOBJECTS, у которой:
      •	FOLDER_NAME = p_folder_name
      •	WORKFLOW_NAME = p_workflow_name
      то для нее обновляются значения полей:
        •	ACTIVE_FLAG = ‘N’
        •	CHANGE_DATE = SYSDATE
      иначе вызывается процедура UTL_ERRHANDLERS.RAISE_ERROR с параметрами:
        •	p_exception_name = ‘e_metadata_not_found’
        •	p_errmsg_text    = ‘Не найден объект IPC в таблице MD_IPCOBJECTS для значений параметров: P_FOLDER_NAME = [ ’+P_FOLDER_NAME+’], P_WORKFLOW_NAME = [’+P_WORKFLOW_NAME+’].’
        •	p_plsqlunit_name = ‘API_METADATA. DEL_MD_IPCOBJECTS’
        •	p_severity_code  = ‘W’
    */

    BEGIN
      SELECT 1
        INTO v_check_flag
        FROM MD_IPCOBJECTS
       WHERE FOLDER_NAME   = p_folder_name
         AND WORKFLOW_NAME = p_workflow_name;
      EXCEPTION
        WHEN NO_DATA_FOUND
        THEN v_check_flag := 0;
    END;

    v_check_flag := nvl(v_check_flag, 0);

    CASE WHEN v_check_flag = 1
      THEN
      UPDATE MD_IPCOBJECTS
         SET ACTIVE_FLAG = 'N',
             CHANGE_DATE = SYSDATE,
             PATCH_CODE  = NVL(p_patch_code, PATCH_CODE)
       WHERE FOLDER_NAME   = p_folder_name
         AND WORKFLOW_NAME = p_workflow_name;

      WHEN v_check_flag = 0
      THEN
        UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_metadata_not_found',
          P_ERRMSG_TEXT    => 'Не найден объект IPC в таблице MD_IPCOBJECTS для значений параметров: P_FOLDER_NAME = [' ||
                               p_folder_name || '],P_WORKFLOW_NAME=' || p_workflow_name || '].',
          P_PLSQLUNIT_NAME => 'API_METADATA.DEL_MD_IPCOBJECTS',
          P_SEVERITY_CODE  => 'W',
          P_SQLERRM_TEXT   => NULL
        );

    END CASE;

    /*
    3. Выполняется подтверждение транзакции БД
    */

    COMMIT;

    /*
    4.	Если при исполнении процедуры возникли исключения,
      то:
      a.	Если SQLCODE не входит в диапазон [-20999;-20000],
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = SQLCODE
        •	p_errmsg_text    = ‘Системная ошибка’
        •	p_plsqlunit_name = ‘API_METADATA.DEL_MD_IPCOBJECTS’
        •	p_severity_code  = ‘S’
        •	p_sqlerrm_text   = SQLERRM
      b.	Вызывается системное исключение.
    */
  EXCEPTION
    WHEN OTHERS THEN
    IF SQLCODE NOT BETWEEN -20999 AND -20000 THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
         P_EXCEPTION_NAME => TO_CHAR(SQLCODE),
         P_ERRMSG_TEXT    => 'Системная ошибка',
         P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_IPCOBJECTS',
         P_SEVERITY_CODE  => 'S',
         P_SQLERRM_TEXT   => SQLERRM
       );
    END IF;
    RAISE;
  END;


    /* Процедуры управления метаданными параметров */

  PROCEDURE UPSERT_MD_PARAMETERS(
    p_param_name    IN VARCHAR2, /* Параметр принимает  значение имени параметра в метаданных продукта */
    p_param_desc    IN VARCHAR2, /* Параметр принимает значение описания параметра */
    p_datatype_code IN VARCHAR2, /* Параметр принимает значение типа данных параметра */
    p_patch_code    IN VARCHAR2 DEFAULT NULL  /* Номер патча */
  )
  IS
    v_check_flag NUMBER;
  BEGIN
    /*
    1.    Контроль параметров:
      a.    Если P_PARAM_NAME равен NULL,
        то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        -    P_EXCEPTION_CODE = -20101
        -    P_ERRMSG_TEXT = ‘Значение параметра P_PARAM_NAME не может принимать значение NULL’
        -    P_PLSQLUNIT_NAME = ‘API_METADATA. UPSERT_MD_PARAMETERS’
        -    P_SEVERITY_CODE = ‘E’
    2.    Если найдена запись в таблице MD_PARAMETERS, у которой:
      -    PARAM_NAME = P_PARAM_NAME
       то выполняется процедура UPD_MD_PARAMETERS с параметрами:
      -    P_PARAM_NAME = P_PARAM_NAME
      -    P_PARAM_DESC = P_PARAM_DESC
      -    P_DATATYPE_CODE = P_DATATYPE_CODE
        иначе выполняется процедура INS_MD_PARAMETERS с параметрами:
      -    P_PARAM_NAME = P_PARAM_NAME
      -    P_PARAM_DESC = P_PARAM_DESC
      -    P_DATATYPE_CODE = P_DATATYPE_CODE

    3.    Выполняется подтверждение транзакции БД
    4.    Если при исполнении процедуры возникли исключения,
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
      -    P_EXCEPTION_CODE = SQLCODE
      -    P_ERRMSG_TEXT = ‘Системная ошибка’
      -    P_PLSQLUNIT_NAME = ‘API_METADATA. UPSERT_MD_PARAMETERS’
      -    P_SEVERITY_CODE = ‘E’
      -    P_SQLERRM_TEXT = SQLERRM
    */


    /*
    1.	Контроль параметров:
      a.	Если p_param_name равен NULL,
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = ’e_paramvalue_empty’
        •	p_errmsg_text    = ‘Значение параметра P_PARAM_NAME не может принимать значение NULL’
        •	p_plsqlunit_name = ‘API_METADATA.UPSERT_MD_PARAMETERS’
        •	p_severity_code  = ‘E’
    */

    IF p_param_name IS NULL THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_paramvalue_empty',
          P_ERRMSG_TEXT    => 'Значение параметра p_param_name не может принимать значение NULL',
          P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_PARAMETERS',
          P_SEVERITY_CODE  => 'E',
          P_SQLERRM_TEXT   => NULL
      );
    END IF;

    /*
     2.	Если найдена запись в таблице MD_PARAMETERS, у которой PARAM_NAME = p_param_name
      то обновляется найденная запись в таблице MD_PARAMETERS с установкой значений полей:
        •	PARAM_DESC    = p_param_desc
        •	DATATYPE_CODE = p_datatype_code
        •	CHANGE_DATE   = SYSDATE
        •	PATCH_CODE    = p_patch_code
      иначе добавляется записи в таблицу MD_PARAMETERS со значениями полей:
        •	PARAM_NAME    = p_param_name
        •	PARAM_NAME    = p_param_desc
        •	DATATYPE_CODE = p_datatype_code
        •	ACTIVE_FLAG   = ‘Y’
        •	CHANGE_DATE   = SYSDATE
        •	P_PATCH_CODE  = p_patch_code
     */
    BEGIN
      SELECT 1
        INTO v_check_flag
        FROM MD_PARAMETERS
       WHERE PARAM_NAME = p_param_name;
    EXCEPTION
      WHEN NO_DATA_FOUND
      THEN v_check_flag := 0;
    END;

    v_check_flag := NVL(v_check_flag, 0);

    IF v_check_flag = 0 THEN
        /* 1.2 Добавляется запись в таблицу MD_PARAMETERS */
        INSERT INTO MD_PARAMETERS
                   (PARAM_NAME, PARAM_DESC, DATATYPE_CODE, ACTIVE_FLAG, CHANGE_DATE, PATCH_CODE)
            VALUES (p_param_name, p_param_desc, p_datatype_code, 'Y', SYSDATE, p_patch_code);

    ELSIF v_check_flag = 1 THEN
        /* 2. Обновляется запись в таблице MD_PARAMETERS */
          UPDATE MD_PARAMETERS
             SET PARAM_DESC     = nvl(p_param_desc, PARAM_DESC),
                 DATATYPE_CODE  = nvl(p_datatype_code, DATATYPE_CODE),
                 CHANGE_DATE    = SYSDATE,
                 PATCH_CODE     = nvl(p_patch_code, PATCH_CODE)
           WHERE PARAM_NAME     = p_param_name;
    END IF;

    /*
    3.	Выполняется подтверждение транзакции БД
    */

    COMMIT;


    /*
    4.	Если при исполнении процедуры возникли исключения,
      то:
      a.	Если SQLCODE не входит в диапазон [-20999;-20000],
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = SQLCODE
        •	p_errmsg_text    = ‘Системная ошибка’
        •	p_plsqlunit_name = ‘API_METADATA.UPSERT_MD_PARAMETERS’
        •	p_severity_code  = ‘S’
        •	p_sqlerrm_text   = SQLERRM
      b.	Вызывается системное исключение.
    */

  EXCEPTION
    WHEN OTHERS THEN
    IF SQLCODE NOT BETWEEN -20999 AND -20000 THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
         P_EXCEPTION_NAME => TO_CHAR(SQLCODE),
         P_ERRMSG_TEXT    => 'Системная ошибка',
         P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_PARAMETERS',
         P_SEVERITY_CODE  => 'S',
         P_SQLERRM_TEXT   => SQLERRM
       );
    END IF;
    RAISE;

  END;

  PROCEDURE DEL_MD_PARAMETERS(
    p_param_name IN VARCHAR2, /* Параметр принимает значение имени параметра, используемого в потоках IPC */
    p_patch_code IN VARCHAR2 DEFAULT NULL   /* Номер патча */
  )
  IS
  BEGIN
    /*
    1.	Контроль параметров:
      a.	Если P_PARAM_NAME равен NULL,
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        -	P_EXCEPTION_CODE = -20101
        -	P_ERRMSG_TEXT = ‘Значение параметра P_PARAM_NAME не может принимать значение NULL’
        -	P_PLSQLUNIT_NAME = ‘API_METADATA.DEL_MD_PARAMETERS’
        -	P_SEVERITY_CODE = ‘E’

    2.	Выполняется обновление записи в таблице MD_PARAMETERS, у которой:
      -	PARAM_NAME = P_PARAM_NAME
       и устанавливаются значения полей:
      -	ACTIVE_FLAG = ‘N’
      -	CHANGE_DATE = SYSDATE
    3.	Выполняется подтверждение транзакции БД
    4.	Если при исполнении процедуры возникли исключения,
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
      -	P_EXCEPTION_CODE = SQLCODE
      -	P_ERRMSG_TEXT = ‘Системная ошибка’
      -	P_PLSQLUNIT_NAME = ‘API_METADATA. DEL_MD_PARAMETERS’
      -	P_SEVERITY_CODE = ‘E’
      -	P_SQLERRM_TEXT = SQLERRM
    */


    /*
    1.	Контроль параметров:
      a.	Если p_param_name равен NULL,
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = ’e_paramvalue_empty’
        •	p_errmsg_text    = ‘Значение параметра P_PARAM_NAME не может принимать значение NULL’
        •	p_plsqlunit_name = ‘API_METADATA.DEL_MD_PARAMETERS’
        •	p_severity_code  = ‘E’
    */

    IF p_param_name IS NULL THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_paramvalue_empty',
          P_ERRMSG_TEXT => 'Значение параметра p_param_name не может принимать значение NULL',
          P_PLSQLUNIT_NAME => 'API_METADATA.DEL_MD_PARAMETERS',
          P_SEVERITY_CODE => 'E',
          P_SQLERRM_TEXT => NULL
      );
    END IF;

    /*
    2.	Для записи в таблице MD_PARAMETERS, у которой PARAM_NAME = p_param_name обновляются значения полей:
      •	ACTIVE_FLAG = ‘N’
      •	CHANGE_DATE = SYSDATE
      •	PATCH_CODE = p_patch_code
    */

      UPDATE MD_PARAMETERS
         SET ACTIVE_FLAG = 'N',
             CHANGE_DATE = SYSDATE,
             PATCH_CODE = nvl(p_patch_code, PATCH_CODE)
       WHERE PARAM_NAME = p_param_name;

      /* 3. Подтверждение транзакции */

      COMMIT;


  /* 4. Блок ислкючений */

  EXCEPTION
    WHEN OTHERS THEN
    IF SQLCODE NOT BETWEEN -20999 AND -20000 THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
         P_EXCEPTION_NAME => TO_CHAR(SQLCODE),
         P_ERRMSG_TEXT => 'Системная ошибка',
         P_PLSQLUNIT_NAME => 'API_METADATA.DEL_MD_PARAMETERS',
         P_SEVERITY_CODE => 'S',
         P_SQLERRM_TEXT => SQLERRM
       );
    END IF;
    RAISE;

  END;

  PROCEDURE UPSERT_MD_IPCOBJPARAMS (
      p_folder_name         IN VARCHAR2 /* Параметр принимает значение имени параметра, используемого в потоках IPC. */
    , p_workflow_name       IN VARCHAR2 /* Параметр принимает значение описание параметра. */
    , p_ipcobjtype_code     IN VARCHAR2 DEFAULT 'WORKFLOW' /* Параметр принимает значение тип объекта IPC, на основании которого формируется секция файла параметров.*/
    , p_ipcobject_name      IN VARCHAR2 DEFAULT NULL /* Параметр принимает значение физическое имя объекта IPC, для которого определяется правила формирования значения параметра.*/
    , p_param_name          IN VARCHAR2 /* Указывается имя параметра, для которого определяется правило вычисления значения.*/
    , p_loadingmode_code    IN VARCHAR2 DEFAULT 'INCREMENT' /* Параметр принимает значение режима загрузки, для которого определяется правило вычисления значения. */
    , p_reglamenttype_code  IN VARCHAR2 DEFAULT 'REGULAR_D' /* Параметр принимает значение типа регламента загрузки, для которого определяется правило вычисления значения.*/
    , p_paramvaluetype_code IN VARCHAR2 /* Указывается тип значения параметра в соответствии с системным словарем DCT_PARAMVALUETYPES. */
    , p_param_value         IN VARCHAR2 /* Указывается значение параметра или правило его вычисления в зависимости от указанного типа значения.*/
    , p_logging_flag        IN VARCHAR2 DEFAULT 'Y' /* Указывается логический признак (Y|N), который определяет необходимость логирования вычисленного значения в журнале LOG_PARAMPREVVALUE. */
    , p_patch_code          IN VARCHAR2 DEFAULT NULL /* Значением параметра определяется номер патча, в котором вносятся изменения.*/

  )
  IS
    v_check_flag NUMBER;
  BEGIN
  /*
      1.  Контроль параметров:
        a.  Если p_folder_name равен NULL,
            то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
            •  P_EXCEPTION_NAME = ’e_paramvalue_empty’
            •  P_ERRMSG_TEXT = ‘Значение параметра P_FOLDER_NAME не может принимать значение NULL’
            •  P_PLSQLUNIT_NAME = ‘API_METADATA.UPSERT_MD_IPCOBJPARAMS’
            •  P_SEVERITY_CODE = ‘E’
        b.  Если p_workflow_name равен NULL,
            то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
            •  P_EXCEPTION_NAME = ’e_paramvalue_empty’
            •  P_ERRMSG_TEXT = ‘Значение параметра P_WORKFLOW_NAME не может принимать значение NULL’
            •  P_PLSQLUNIT_NAME = ‘API_METADATA.UPSERT_MD_IPCOBJPARAMS’
            •  P_SEVERITY_CODE = ‘E’
        c.  Если p_param_name равен NULL,
            то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
            •  P_EXCEPTION_NAME = ’e_paramvalue_empty’
            •  P_ERRMSG_TEXT = ‘Значение параметра P_PARAM_NAME не может принимать значение NULL’
            •  P_PLSQLUNIT_NAME = ‘API_METADATA.UPSERT_MD_IPCOBJPARAMS’
            •  P_SEVERITY_CODE = ‘E’
        d.  Если p_paramvaluetype_code равен NULL,
            то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
            •  P_EXCEPTION_NAME = ’e_paramvalue_empty’
            •  P_ERRMSG_TEXT = ‘Значение параметра P_PARAMVALUETYPE_CODE не может принимать значение NULL’
            •  P_PLSQLUNIT_NAME = ‘API_METADATA.UPSERT_MD_IPCOBJPARAMS’
            •  P_SEVERITY_CODE = ‘E’

      2.  Если найдена запись в таблице MD_IPCOBJECTS, у которой:
            ?  FOLDER_NAME         = p_folder_name
            ?  WORKFLOW_NAME       = p_workflow_name
            ?  IPCOBJTYPE_CODE     = p_ipcobjtype_code
            ?  IPCOBJECT_NAME      = p_ipcobject_name
            ?  PARAM_NAME          = p_param_name
            ?  LOADINGMODE_CODE    = p_loadingmode_code
            ?  REGLAMENTTYPE_CODE  = p_reglamenttype_code
          то обновляется найденная запись в таблице MD_IPCOBJPARAMS с установкой значений полей:
            ?  PARAMVALUETYPE_CODE = p_paramvaluetype_code
            ?  PARAM_VALUE         = p_param_value
            ?  LOGGING_FLAG        = p_logging_flag
            ?  CHANGE_DATE         = SYSDATE
            ?  PATCH_CODE          = p_patch_code
          иначе добавляется новая запись в таблицу MD_IPCOBJPARAMS со значениями полей:
            ?  FOLDER_NAME         = p_folder_name
            ?  WORKFLOW_NAME       = p_workflow_name
            ?  IPCOBJTYPE_CODE     = p_ipcobjtype_code
            ?  IPCOBJECT_NAME      = p_ipcobject_name
            ?  PARAM_NAME          = p_param_name
            ?  LOADINGMODE_CODE    = p_loadingmode_code
            ?  REGLAMENTTYPE_CODE  = p_reglamenttype_code
            ?  PARAMVALUETYPE_CODE = p_paramvaluetype_code
            ?  PARAM_VALUE         = p_param_value
            ?  LOGGING_FLAG        = p_logging_flag
            ?  CHANGE_DATE         = SYSDATE
            ?  PATCH_CODE          = p_patch_code

      3.  Выполняется подтверждение транзакции БД
      4.  Если при исполнении процедуры возникли исключения,
          то:
          a.  Если SQLCODE не входит в диапазон [-20999;-20000],
              то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
                ?  P_EXCEPTION_NAME = SQLCODE
                ?  P_ERRMSG_TEXT = ‘Системная ошибка’
                ?  P_PLSQLUNIT_NAME = ‘API_METADATA.UPSERT_MD_IPCOBJPARAMS’
                ?  P_SEVERITY_CODE = ‘S’
                ?  P_SQLERRM_TEXT = SQLERRM
          b.  Вызывается системное исключение.*/

  /* 1. Контроль параметров */
    IF p_folder_name IS NULL  THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_paramvalue_empty',
          P_ERRMSG_TEXT => 'Значение параметра P_FOLDER_NAME не может принимать значение NULL',
          P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_IPCOBJPARAMS',
          P_SEVERITY_CODE => 'E',
          P_SQLERRM_TEXT => NULL
      );
    END IF;

    IF p_workflow_name IS NULL THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_paramvalue_empty',
          P_ERRMSG_TEXT => 'Значение параметра P_WORKFLOW_NAME не может принимать значение NULL',
          P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_IPCOBJPARAMS',
          P_SEVERITY_CODE => 'E',
          P_SQLERRM_TEXT => NULL
      );

    END IF;

    IF p_param_name IS NULL THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_paramvalue_empty',
          P_ERRMSG_TEXT => 'Значение параметра P_PARAM_NAME не может принимать значение NULL',
          P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_IPCOBJPARAMS',
          P_SEVERITY_CODE => 'E',
          P_SQLERRM_TEXT => NULL
      );
    END IF;

  /* 2. Проверка наличия записи и выполнения INSERT или UPDATE */
    BEGIN
      SELECT 1
        INTO v_check_flag
        FROM MD_IPCOBJPARAMS
       WHERE
            FOLDER_NAME         = p_folder_name
        AND WORKFLOW_NAME       = p_workflow_name
        AND IPCOBJTYPE_CODE     = p_ipcobjtype_code
        AND (IPCOBJECT_NAME      = p_ipcobject_name
            OR (p_ipcobject_name IS NULL AND IPCOBJECT_NAME IS NULL))
        AND PARAM_NAME          = p_param_name
        AND LOADINGMODE_CODE    = p_loadingmode_code
        AND REGLAMENTTYPE_CODE  = p_reglamenttype_code;
    EXCEPTION
      WHEN NO_DATA_FOUND
        THEN v_check_flag := 0;
    END;

    v_check_flag := NVL(v_check_flag, 0);

    IF v_check_flag = 0 THEN
        /* 1.1 Дополнительный контроль параметров при добавлении*/
        IF p_paramvaluetype_code IS NULL THEN
          UTL_ERRHANDLERS.RAISE_ERROR(
              P_EXCEPTION_NAME => 'e_paramvalue_empty',
              P_ERRMSG_TEXT => 'Значение параметра P_PARAMVALUETYPE_CODE не может принимать значение NULL',
              P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_IPCOBJPARAMS',
              P_SEVERITY_CODE => 'E',
              P_SQLERRM_TEXT => NULL
          );
        END IF;

        IF p_param_value IS NULL THEN
          UTL_ERRHANDLERS.RAISE_ERROR(
              P_EXCEPTION_NAME => 'e_paramvalue_empty',
              P_ERRMSG_TEXT => 'Значение параметра P_PARAM_VALUE не может принимать значение NULL',
              P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_IPCOBJPARAMS',
              P_SEVERITY_CODE => 'E',
              P_SQLERRM_TEXT => NULL
          );
        END IF;

        /* 1.2 Добавляется запись в таблицу MD_IPCOBJPARAMS */
        INSERT INTO MD_IPCOBJPARAMS(
                FOLDER_NAME, WORKFLOW_NAME, IPCOBJTYPE_CODE, IPCOBJECT_NAME, PARAM_NAME, LOADINGMODE_CODE, REGLAMENTTYPE_CODE, PARAMVALUETYPE_CODE, PARAM_VALUE, LOGGING_FLAG, CHANGE_DATE, PATCH_CODE
                )
            VALUES (
                p_folder_name, p_workflow_name, p_ipcobjtype_code, p_ipcobject_name, p_param_name, p_loadingmode_code, p_reglamenttype_code, p_paramvaluetype_code, p_param_value, p_logging_flag, SYSDATE, p_patch_code
                );

    ELSIF v_check_flag = 1 THEN
        /* 2. Обновляется запись в таблице MD_IPCOBJPARAMS */
          UPDATE MD_IPCOBJPARAMS SET
                PARAMVALUETYPE_CODE = NVL(p_paramvaluetype_code, PARAMVALUETYPE_CODE)
              , PARAM_VALUE         = NVL(p_param_value, PARAM_VALUE)
              , LOGGING_FLAG        = NVL(p_logging_flag, LOGGING_FLAG)
              , CHANGE_DATE         = SYSDATE
              , PATCH_CODE          = NVL(p_patch_code, PATCH_CODE)
           WHERE
                FOLDER_NAME         = p_folder_name
            AND WORKFLOW_NAME       = p_workflow_name
            AND IPCOBJTYPE_CODE     = p_ipcobjtype_code
            AND (IPCOBJECT_NAME     = p_ipcobject_name
                OR (p_ipcobject_name IS NULL AND IPCOBJECT_NAME IS NULL))
            AND PARAM_NAME          = p_param_name
            AND LOADINGMODE_CODE    = p_loadingmode_code
            AND REGLAMENTTYPE_CODE  = p_reglamenttype_code;
    END IF;

  /* 3. Подтверждение транзакции */
    COMMIT;

  /* 4. Блок ислкючений */

  EXCEPTION
    WHEN OTHERS THEN
      IF SQLCODE NOT BETWEEN -20999 AND -20000 THEN
        UTL_ERRHANDLERS.RAISE_ERROR(
           P_EXCEPTION_NAME => TO_CHAR(SQLCODE),
           P_ERRMSG_TEXT => 'Системная ошибка',
           P_PLSQLUNIT_NAME => 'API_METADATA.DEL_MD_PARAMETERS',
           P_SEVERITY_CODE => 'S',
           P_SQLERRM_TEXT => SQLERRM
         );
      END IF;
      RAISE;
  END;

  PROCEDURE DEL_MD_IPCOBJPARAMS(
        p_folder_name         IN VARCHAR2 /* Параметр принимает значение имени параметра, используемого в потоках IPC. */
      , p_workflow_name       IN VARCHAR2 /* Параметр принимает значение описание параметра. */
      , p_ipcobjtype_code     IN VARCHAR2 /* Параметр принимает значение тип объекта IPC, на основании которого формируется секция файла параметров. */
      , p_ipcobject_name      IN VARCHAR2 /* Параметр принимает значение физическое имя объекта IPC, для которого определяется правила формирования значения параметра. */
      , p_param_name          IN VARCHAR2 /* Указывается имя параметра, для которого определяется правило вычисления значения. */
      , p_loadingmode_code    IN VARCHAR2 /* Параметр принимает значение режима загрузки, для которого определяется правило вычисления значения.  */
      , p_reglamenttype_code  IN VARCHAR2 /* Параметр принимает значение типа регламента загрузки, для которого определяется правило вычисления значения. */
    )
  IS
  BEGIN

  /* 1. Контроль параметров */
    IF p_folder_name IS NULL  THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_paramvalue_empty',
          P_ERRMSG_TEXT => 'Значение параметра P_FOLDER_NAME не может принимать значение NULL',
          P_PLSQLUNIT_NAME => 'API_METADATA.DEL_MD_IPCOBJPARAMS',
          P_SEVERITY_CODE => 'E',
          P_SQLERRM_TEXT => NULL
      );
    END IF;

    IF p_workflow_name IS NULL THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_paramvalue_empty',
          P_ERRMSG_TEXT => 'Значение параметра P_WORKFLOW_NAME не может принимать значение NULL',
          P_PLSQLUNIT_NAME => 'API_METADATA.DEL_MD_IPCOBJPARAMS',
          P_SEVERITY_CODE => 'E',
          P_SQLERRM_TEXT => NULL
      );

    END IF;
    IF p_ipcobjtype_code IS NULL THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_paramvalue_empty',
          P_ERRMSG_TEXT => 'Значение параметра P_IPCOBJTYPE_CODE не может принимать значение NULL',
          P_PLSQLUNIT_NAME => 'API_METADATA.DEL_MD_IPCOBJPARAMS',
          P_SEVERITY_CODE => 'E',
          P_SQLERRM_TEXT => NULL
      );
    END IF;

    IF p_param_name IS NULL THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_paramvalue_empty',
          P_ERRMSG_TEXT => 'Значение параметра P_PARAM_NAME не может принимать значение NULL',
          P_PLSQLUNIT_NAME => 'API_METADATA.DEL_MD_IPCOBJPARAMS',
          P_SEVERITY_CODE => 'E',
          P_SQLERRM_TEXT => NULL
      );
    END IF;

    IF p_loadingmode_code IS NULL THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_paramvalue_empty',
          P_ERRMSG_TEXT => 'Значение параметра P_LOADINGMODE_CODE не может принимать значение NULL',
          P_PLSQLUNIT_NAME => 'API_METADATA.DEL_MD_IPCOBJPARAMS',
          P_SEVERITY_CODE => 'E',
          P_SQLERRM_TEXT => NULL
      );
    END IF;

    IF p_reglamenttype_code IS NULL THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_paramvalue_empty',
          P_ERRMSG_TEXT => 'Значение параметра P_REGLAMENTTYPE_CODE не может принимать значение NULL',
          P_PLSQLUNIT_NAME => 'API_METADATA.DEL_MD_IPCOBJPARAMS',
          P_SEVERITY_CODE => 'E',
          P_SQLERRM_TEXT => NULL
      );
    END IF;

  /* 2. Удаление назначения параметра */
    DELETE FROM MD_IPCOBJPARAMS
      WHERE
            FOLDER_NAME         = p_folder_name
        AND WORKFLOW_NAME       = p_workflow_name
        AND IPCOBJTYPE_CODE     = p_ipcobjtype_code
        AND (IPCOBJECT_NAME     = p_ipcobject_name
            OR (p_ipcobject_name IS NULL AND IPCOBJECT_NAME IS NULL))
        AND PARAM_NAME          = p_param_name
        AND LOADINGMODE_CODE    = p_loadingmode_code
        AND REGLAMENTTYPE_CODE  = p_reglamenttype_code;

  /* 3. Подтверждение транзакции */
    COMMIT;

  /* 4. Блок ислкючений */
  EXCEPTION
    WHEN OTHERS THEN
      IF SQLCODE NOT BETWEEN -20999 AND -20000 THEN
        UTL_ERRHANDLERS.RAISE_ERROR(
           P_EXCEPTION_NAME => TO_CHAR(SQLCODE),
           P_ERRMSG_TEXT => 'Системная ошибка',
           P_PLSQLUNIT_NAME => 'API_METADATA.DEL_MD_PARAMETERS',
           P_SEVERITY_CODE => 'S',
           P_SQLERRM_TEXT => SQLERRM
         );
      END IF;
      RAISE;
  END;



    PROCEDURE UPSERT_MD_TABLES(
    /*
    Процедура изменения метаданных для таблиц Витрины
    Назначение:
      Процедура предназначена для изменения (добавления или обновления) регистрации таблиц Витрин в метаданных Продукта
      В результате изменения добавляется или обновляется одна запись в регистрации таблиц Витрины.
    Тип процедуры: API
    */

    p_schema_name IN VARCHAR2, /* Параметр принимает значение имени схемы Витрины, в которой размещена таблица*/
    p_table_name IN VARCHAR2, /* Параметр принимает значение SQL-имени таблицы Витрины */
    p_table_desc IN VARCHAR2 DEFAULT NULL, /* Параметр принимает значение описания таблицы Витрины */
    p_patch_code          IN VARCHAR2 DEFAULT NULL /* Значением параметра определяется номер патча, в котором вносятся изменения.*/
  )
  IS

      v_check_flag INTEGER;

  BEGIN
    /*
    1.	Контроль параметров:
      a.	Если p_schema_name равен NULL,
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = ’e_paramvalue_empty’
        •	p_errmsg_text    = ‘Значение параметра p_schema_name не может принимать значение NULL’
        •	p_plsqlunit_name = ‘API_METADATA.UPSERT_MD_TABLES’
        •	p_severity_code  = ‘E’
    */
    IF p_schema_name IS NULL THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
        P_EXCEPTION_NAME => 'e_paramvalue_empty',
        P_ERRMSG_TEXT => 'Значение параметра p_schema_name не может принимать значение NULL',
        P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_TABLES',
        P_SEVERITY_CODE => 'E'
      );
    END IF;

    /*
      b.	Если p_table_name равен NULL,
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = ’e_paramvalue_empty’
        •	p_errmsg_text    = ‘Значение параметра p_table_name не может принимать значение NULL’
        •	p_plsqlunit_name = ‘API_METADATA.UPSERT_MD_TABLES’
        •	p_severity_code  = ‘E’
    */

    IF p_table_name IS NULL
      THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
        P_EXCEPTION_NAME => 'e_paramvalue_empty',
        P_ERRMSG_TEXT => 'Значение параметра p_table_name не может принимать значение NULL',
        P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_TABLES',
        P_SEVERITY_CODE => 'E'
      );

      /*
      2.	Если найдена запись в таблице MD_TABLES, у которой:
      • SCHEMA_NAME   = p_schema_name
      • TABLE_NAME    = p_table_name
        то обновляется найденная запись в таблице MD_TABLES с установкой значений полей:
        • TABLE_DESC       = p_table_desc
        • CHANGE_DATE      = SYSDATE
        • PATCH_CODE       = p_patch_code
      иначе добавляется запись в таблицу MD_TABLES со значениями полей:
      • SCHEMA_NAME      = p_schema_name
      • TABLE_NAME       = p_table_name
      • TABLE_DESC       = p_table_desc
      • CHANGE_DATE      = SYSDATE
      */
    END IF;

    BEGIN
      SELECT 1
        INTO v_check_flag
        FROM MD_TABLES
       WHERE SCHEMA_NAME = p_schema_name
         AND TABLE_NAME = p_table_name;

    EXCEPTION
      WHEN NO_DATA_FOUND
        THEN v_check_flag := 0;
    END;

    v_check_flag := NVL(v_check_flag, 0);

    CASE WHEN v_check_flag = 1
      THEN
      UPDATE MD_TABLES
         SET TABLE_DESC = p_table_desc,
             CHANGE_DATE = SYSDATE,
             PATCH_CODE = p_patch_code
       WHERE SCHEMA_NAME = p_schema_name
         AND TABLE_NAME = p_table_name;
    WHEN v_check_flag = 0
      THEN
      INSERT INTO MD_TABLES
               (SCHEMA_NAME, TABLE_NAME, TABLE_DESC, CHANGE_DATE, PATCH_CODE)
        VALUES (p_schema_name, p_table_name, p_table_desc, SYSDATE, p_patch_code);
    END CASE;

    /*
    3.	Выполняется подтверждение транзакции БД
    */
    COMMIT;

    /*
    4.	Если при исполнении процедуры возникли исключения,
    то:
      a.	Если SQLCODE не входит в диапазон [-20999;-20000],
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = SQLCODE
        •	p_errmsg_text    = ‘Системная ошибка’
        •	p_plsqlunit_name = ‘API_METADATA.UPSERT_MD_TABLES’
        •	p_severity_code  = ‘S’
        •	p_sqlerrm_text   = SQLERRM
      b.	Вызывается системное исключение
    */

  EXCEPTION
    WHEN OTHERS THEN
      IF SQLCODE NOT BETWEEN -20999 AND -20000 THEN
        UTL_ERRHANDLERS.RAISE_ERROR(
           P_EXCEPTION_NAME => TO_CHAR(SQLCODE),
           P_ERRMSG_TEXT => 'Системная ошибка',
           P_PLSQLUNIT_NAME => 'API_METADATA.DEL_MD_PARAMETERS',
           P_SEVERITY_CODE => 'S',
           P_SQLERRM_TEXT => SQLERRM
         );
      END IF;
      RAISE;
  END;


  PROCEDURE REMOVE_MD_TABLES(
    /*
    Процедура физического удаления метаданных для таблицы Витрины
    Назначение:
      Процедура предназначена для удаления регистрации таблиц Витрин в метаданных продукта
      В результате изменения добавляется или обновляется одна запись в реестре атрибутов таблиц Витрины
    Тип процедуры:
      API
    */
    p_schema_name IN VARCHAR2, /* Параметр принимает значение имени схемы Витрины, в которой размешена таблица */
    p_table_name IN VARCHAR2 /* Параметр принимает значение SQL-имени таблицы Витрины */
  )
  IS
  BEGIN
    /*
    1.	Контроль параметров:
      a.	Если p_schema_name равен NULL,
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = ’e_paramvalue_empty’
        •	p_errmsg_text    = ‘Значение параметра p_schema_name не может принимать значение NULL’
        •	p_plsqlunit_name = ‘API_METADATA.REMOVE_MD_TABLES’
        •	p_severity_code  = ‘E’
    */

    IF p_schema_name IS NULL
      THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
        P_EXCEPTION_NAME => 'e_paramvalue_empty',
        P_ERRMSG_TEXT    => 'Значение параметра p_schema_name не может принимать значение NULL',
        P_PLSQLUNIT_NAME => 'API_METADATA.REMOVE_MD_TABLES',
        P_SEVERITY_CODE  => 'E'
      );
    END IF;
    /*
      b.	Если p_table_name равен NULL,
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = ’e_paramvalue_empty’
        •	p_errmsg_text    = ‘Значение параметра p_table_name не может принимать значение NULL’
        •	p_plsqlunit_name = ‘API_METADATA.REMOVE_MD_TABLES’
        •	p_severity_code  = ‘E’
    */

    IF p_table_name IS NULL
      THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
        P_EXCEPTION_NAME => 'e_paramvalue_empty',
        P_ERRMSG_TEXT    => 'Значение параметра p_table_name не может принимать значение NULL',
        P_PLSQLUNIT_NAME => 'API_METADATA.REMOVE_MD_TABLES',
        P_SEVERITY_CODE  => 'E'
      );
    END IF;

    /*
    2.	Удаляются записи из таблицы MD_COLUMNS, у которой:
      •	SCHEMA_NAME   = p_schema_name
      •	TABLE_NAME    = p_table_name
    */

    DELETE
      FROM MD_COLUMNS
     WHERE SCHEMA_NAME = p_schema_name
       AND TABLE_NAME  = p_table_name;

    /*
    3.	Удаляется запись из таблицы MD_TABLES, у которой:
      •	SCHEMA_NAME   = p_schema_name
      •	TABLE_NAME    = p_table_name
    */

    DELETE
      FROM MD_TABLES
     WHERE SCHEMA_NAME = p_schema_name
       AND TABLE_NAME  = p_table_name;

    /*
    4.	Выполняется подтверждение транзакции БД
    */

    COMMIT;

    /*
    5.	Если при исполнении процедуры возникли исключения,
    то:
    a.	Если SQLCODE не входит в диапазон [-20999;-20000],
    то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
      •	p_exception_name = SQLCODE
      •	p_errmsg_text    = ‘Системная ошибка’
      •	p_plsqlunit_name = ‘API_METADATA.REMOVE_MD_TABLES’
      •	p_severity_code  = ‘S’
      •	p_sqlerrm_text   = SQLERRM
    b.	Вызывается системное исключение.
    */

  EXCEPTION
    WHEN OTHERS THEN
      IF SQLCODE NOT BETWEEN -20999 AND -20000 THEN
        UTL_ERRHANDLERS.RAISE_ERROR(
           P_EXCEPTION_NAME => TO_CHAR(SQLCODE),
           P_ERRMSG_TEXT => 'Системная ошибка',
           P_PLSQLUNIT_NAME => 'API_METADATA.DEL_MD_PARAMETERS',
           P_SEVERITY_CODE => 'S',
           P_SQLERRM_TEXT => SQLERRM
         );
      END IF;
      RAISE;

  END;


  PROCEDURE UPSERT_MD_COLUMNS(
    /*
    Процедура изменений метаданных для атрибута таблиц Витрины
    Назначение:
      Процедура предназначена для изменения(добавления или обновления) регистрации атрибута таблиц Витрины в метаданных Продукта
      В результате изменения добавляется или обновляется запись в Атрибутах таблиц Витрины
    */
    p_schema_name        IN VARCHAR2, /* Параметр принимает значение SQL-имени схемы Витрины, в которой размещена таблица */
    p_table_name         IN VARCHAR2, /* Параметр принимает значение SQL-имени таблицы Витрины. */
    p_column_name        IN VARCHAR2, /* Параметр принимает значение SQL-имени добавляемого/изменяемого поля таблицы. */
    p_deletedkey_flag    IN VARCHAR2, /* Параметр принимает значение для определения флага поля для определения ключа для удаления */
    p_nvl_flag           IN VARCHAR2, /* Параметр принимает значение для определения флага поля для определения обработки необязательных полей функции NVL */
    p_columntype_code    IN VARCHAR2,
    p_default_value      IN VARCHAR2 DEFAULT NULL, /* Параметр принимает значение по умолчанию, определенное для атрибута таблицы, которое используется при обработке NVL*/
    p_ref_scheme_name    IN VARCHAR2 DEFAULT NULL, /* Параметр принимает значение SQL-имени схемы, в которой размешена таблица, на которую ссылается атрибут */
    p_ref_table_name     IN VARCHAR2 DEFAULT NULL, /* Параметр принимает значение SQL-имени таблицы, на которую ссылается атрибут */
    p_ref_expression_sql IN VARCHAR2 DEFAULT NULL, /* Параметр принимает значение SQL-выражение, значения которого явдяются исходными натуральными ключами для заполнения поля DM*_STG.KEYBRIDGE.CODE */
    p_insnewkey_flag     IN VARCHAR2 DEFAULT NULL, /* Флаг, который определяет, что по значениям натурального ключа ссылочного атрибута требуется генерация суррогатных ключей DK */
    p_patch_code         IN NUMBER DEFAULT NULL    /* Параметр принимает значение идентификатора Управляющего потока, в рамках которого исполняется. */
  )
  IS
    v_check_flag NUMBER;
  BEGIN
    /*
    1.	Контроль параметров:
      a.	Если p_schema_name равен NULL,
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = ’e_paramvalue_empty’
        •	p_errmsg_text    = ‘Значение параметра p_schema_name не может принимать значение NULL’
        •	p_plsqlunit_name = ‘API_METADATA.UPSERT_MD_COLUMNS’
        •	p_severity_code  = ‘E’
    */
    IF p_schema_name IS NULL
      THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
        P_EXCEPTION_NAME => 'e_paramvalue_empty',
        P_ERRMSG_TEXT    => 'Значение параметра p_schema_name не может принимать значение NULL',
        P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_COLUMNS',
        P_SEVERITY_CODE  => 'E',
        P_SQLERRM_TEXT   => NULL
      );
    END IF;

    /*
      b.	Если p_table_name равен NULL,
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = ’e_paramvalue_empty’
        •	p_errmsg_text    = ‘Значение параметра p_table_name не может принимать значение NULL’
        •	p_plsqlunit_name = ‘API_METADATA.UPSERT_MD_COLUMNS’
        •	p_severity_code  = ‘E’
    */

    IF p_table_name IS NULL
      THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
        P_EXCEPTION_NAME => 'e_paramvalue_empty',
        P_ERRMSG_TEXT    => 'Значение параметра p_table_name не может принимать значение NULL',
        P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_COLUMNS',
        P_SEVERITY_CODE  => 'E',
        P_SQLERRM_TEXT   => NULL
      );
    END IF;

    /*
        c.	Если p_column_name равен NULL,
          то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
          • p_exception_name = ’e_paramvalue_empty’
          • p_errmsg_text    = ‘Значение параметра p_column_name не может принимать значение NULL’
          • p_plsqlunit_name = ‘API_METADATA.UPSERT_MD_COLUMNS’
          • p_severity_code  = ‘E’
    */

    IF p_column_name IS NULL
      THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
        P_EXCEPTION_NAME => 'e_paramvalue_empty',
        P_ERRMSG_TEXT    => 'Значение параметра p_column_name не может принимать значение NULL',
        P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_COLUMNS',
        P_SEVERITY_CODE  => 'E',
        P_SQLERRM_TEXT   => NULL
      );
    END IF;

    /*
      e.	Если p_deletedkey_flag равен NULL,
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        • p_exception_name = ’e_paramvalue_empty’
        • p_errmsg_text    = ‘Значение параметра p_deletedkey_flag не может принимать значение NULL’
        • p_plsqlunit_name = ‘API_METADATA.UPSERT_MD_COLUMNS’
        • p_severity_code  = ‘E’
    */

    IF p_deletedkey_flag IS NULL
      THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
          P_EXCEPTION_NAME => 'e_paramvalue_empty',
          P_ERRMSG_TEXT    => 'Значение параметра p_deletedkey_flag не может принимать значение NULL',
          P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_COLUMNS',
          P_SEVERITY_CODE  => 'E',
          P_SQLERRM_TEXT   => NULL
      );
    END IF;

    /*
      f. Если p_nvl_flag равен NULL,
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        • p_exception_name = ’e_paramvalue_empty’
        • p_errmsg_text    = ‘Значение параметра p_nvl_flag не может принимать значение NULL’
        • p_plsqlunit_name = ‘API_METADATA.UPSERT_MD_COLUMNS’
        • p_severity_code  = ‘E’
    */

    IF p_nvl_flag IS NULL
      THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
        P_EXCEPTION_NAME => 'e_paramvalue_empty',
        P_ERRMSG_TEXT    => 'Значение параметра p_nvl_flag не может принимать значение NULL',
        P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_COLUMNS',
        P_SEVERITY_CODE  => 'E',
        P_SQLERRM_TEXT   => NULL
      );
    END IF;

    /*
        g.	Если p_nvl_flag = ’Y’ И p_default_value равен NULL,
          то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
          • p_exception_name = ’e_paramvalue_empty’
          • p_errmsg_text    = ‘Значение параметра p_default_value не может принимать значение NULL, так как для атрибута определена обработка NULL значений (P_NVL_FLAG = [Y])’
          • p_plsqlunit_name = ‘API_METADATA.UPSERT_MD_COLUMNS’
          • p_severity_code  = ‘E’

    */

    IF p_nvl_flag = 'Y' and p_default_value IS NULL
      THEN
      UTL_ERRHANDLERS.RAISE_ERROR(
        P_EXCEPTION_NAME => 'e_paramvalue_empty',
        P_ERRMSG_TEXT    => 'Значение параметра p_default_value не может принимать значение NULL, так как для атрибута определена обработка NULL значений (P_NVL_FLAG = [Y])',
        P_PLSQLUNIT_NAME => 'API_METADATA.UPSERT_MD_COLUMNS',
        P_SEVERITY_CODE  => 'E',
        P_SQLERRM_TEXT   => NULL
      );
    END IF;

    /*
    2.	Если найдена запись в таблице MD_COLUMNS, у которой:
      • SCHEMA_NAME   = p_schema_name
      • TABLE_NAME    = p_table_name
      • COLUMN_NAME   = p_column_name
        то обновляется найденная запись в таблице MD_COLUMNS с установкой значений полей:
        • COLUMNTYPE_CODE    = p_columntype_code
        • DELETEDKEY_FLAG    = p_deletedkey_flag
        • NVL_FLAG           = p_nvl_flag
        • DEFAULT_VALUE      = p_default_value
        • REF_SCHEME_NAME    = p_ref_scheme_name
        • REF_TABLE_NAME     = p_ref_table_name
        • REF_EXPRESSION_SQL = p_ref_expression_sql
        • INSNEWKEY_FLAG     = p_insnewkey_flag
        • CHANGE_DATE        = SYSDATE
        • PATCH_CODE         = p_patch_code
    иначе добавляется запись в таблицу MD_TABLES со значениями полей:
      • SCHEMA_NAME        = p_schema_name
      • TABLE_NAME         = p_table_name
      • COLUMN_NAME        = p_column_name
      • COLUMNTYPE_CODE    = p_columntype_code
      • DELETEDKEY_FLAG    = p_deletedkey_flag
      • NVL_FLAG           = p_nvl_flag
      • DEFAULT_VALUE      = p_default_value
      • REF_SCHEME_NAME    = p_ref_scheme_name
      • REF_TABLE_NAME     = p_ref_table_name
      • REF_EXPRESSION_SQL = p_ref_expression_sql
      • INSNEWKEY_FLAG     = p_insnewkey_flag
      • CHANGE_DATE        = SYSDATE
      • PATCH_CODE         = p_patch_code
    */

    BEGIN
      SELECT 1
        INTO v_check_flag
        FROM MD_COLUMNS
       WHERE SCHEMA_NAME = p_schema_name
         AND TABLE_NAME  = p_table_name
         AND COLUMN_NAME = p_column_name;

    EXCEPTION
      WHEN NO_DATA_FOUND
        THEN v_check_flag := 0;
    END;

    v_check_flag := NVL(v_check_flag, 0);

    CASE WHEN v_check_flag = 1
      THEN
      UPDATE MD_COLUMNS
        SET COLUMNTYPE_CODE  = NVL(p_columntype_code, COLUMNTYPE_CODE )
        , DELETEDKEY_FLAG    = NVL(p_deletedkey_flag, DELETEDKEY_FLAG)
        , NVL_FLAG           = NVL(p_nvl_flag, NVL_FLAG)
        , DEFAULT_VALUE      = NVL(p_default_value, DEFAULT_VALUE)
        , REF_SCHEME_NAME    = NVL(p_ref_scheme_name, REF_SCHEME_NAME)
        , REF_TABLE_NAME     = NVL(p_ref_table_name, REF_TABLE_NAME)
        , REF_EXPRESSION_SQL = NVL(p_ref_expression_sql, REF_EXPRESSION_SQL)
        , INSNEWKEY_FLAG     = NVL(p_insnewkey_flag, INSNEWKEY_FLAG)
        , CHANGE_DATE        = SYSDATE
        , PATCH_CODE         = NVL(p_patch_code, PATCH_CODE)
      WHERE SCHEMA_NAME = p_schema_name
        AND TABLE_NAME  = p_table_name
        AND COLUMN_NAME = p_column_name;
      WHEN v_check_flag = 0
      THEN
      INSERT INTO MD_COLUMNS
                (SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, COLUMNTYPE_CODE, DELETEDKEY_FLAG,
                 NVL_FLAG, DEFAULT_VALUE, REF_SCHEME_NAME, REF_TABLE_NAME, REF_EXPRESSION_SQL,
                 INSNEWKEY_FLAG, CHANGE_DATE, PATCH_CODE)
        VALUES  (p_schema_name, p_table_name, p_column_name, p_columntype_code, p_deletedkey_flag,
                 p_nvl_flag, p_default_value, p_ref_scheme_name, p_ref_table_name, p_ref_expression_sql,
                 p_insnewkey_flag, SYSDATE, p_patch_code);
    END CASE ;

    /*
    3.	Выполняется подтверждение транзакции БД
    */

    COMMIT;

    /*
    4.	Если при исполнении процедуры возникли исключения,
      то:
      a.	Если SQLCODE не входит в диапазон [-20999;-20000],
      то вызывается UTL_ERRHANDLERS.RAISE_ERROR  с параметрами:
        •	p_exception_name = SQLCODE
        •	p_errmsg_text    = ‘Системная ошибка’
        •	p_plsqlunit_name = ‘API_METADATA.UPSERT_MD_COLUMNS’
        •	p_severity_code  = ‘S’
        •	p_sqlerrm_text   = SQLERRM
      b.	Вызывается системное исключение.
    */

  EXCEPTION
    WHEN OTHERS THEN
      IF SQLCODE NOT BETWEEN -20999 AND -20000 THEN
        UTL_ERRHANDLERS.RAISE_ERROR(
           P_EXCEPTION_NAME => TO_CHAR(SQLCODE),
           P_ERRMSG_TEXT => 'Системная ошибка',
           P_PLSQLUNIT_NAME => 'API_METADATA.DEL_MD_PARAMETERS',
           P_SEVERITY_CODE => 'S',
           P_SQLERRM_TEXT => SQLERRM
         );
      END IF;
      RAISE;

  END;

END API_METADATA;
/